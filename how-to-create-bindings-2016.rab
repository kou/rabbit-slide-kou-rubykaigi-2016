= Ruby bindings 2016

: subtitle
   How to create bindings 2016

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2016
: date
   2016-09-09
: allotted-time
   35m
: theme
   .

= Silver sponsor

  # img
  # src = images/clear-code-silver-sponsor.png
  # relative_height = 100

# == Slide properties

# : enable-title-on-image
#    false

= Goal\n(('note:目標'))

(('tag:center'))
(('tag:large'))
You become\n
a new bindings developer

(('tag:center'))
(('note:あなたが新しくバインディング開発者になること'))

= Bindings?\n(('note:バインディングとは'))

  * Glue of (('note:(mainly)')) C and Ruby\n
    (('note:主にCとRubyをつなぐもの'))

    * (('wait'))You can use features implemented in C from Ruby\n
      (('note:Cで実装された機能をRubyから使える'))

    * (('wait'))e.g.: Socket, OpenSSL, YAML, ...\n
      (('note:例：ソケット、OpenSSL、YAML…'))

= Bindings\n(('note:バインディング'))

  # image
  # src = images/bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= Why should I become?\n(('note:なんでバインディング開発者になるの？'))

  * (('wait'))To use Ruby in more cases\n
    (('note:Rubyをもっといろんな場面で使うため'))
    * e.g.: (('tag:x-small:Machine leaning, multimedia, full text search, cipher and so on'))\n
      (('note:例：機械学習、画像・動画・音声処理、全文検索、暗号'))
  * (('wait'))We can use existing good features in Ruby by bindings\n
    (('note:バインディングがあると既存のいい機能をRubyで使える'))

= Incr. bindings developer\n(('note:バインディング開発者が増えるといいな'))

  * How about becoming a bindings developer?\n
    (('note:バインディング開発者になりませんか？'))
    * (('wait'))To expand use cases of Ruby!\n
      (('note:Rubyを使えるケースを増やすために！'))
    * (('wait'))Not just an user for\n
      provided features\n
      (('note:提供された機能を使う1ユーザーではなく'))

= Summary\n(('note:概要'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Demo\n(('note:デモ'))

How powerful auto generated bindings\n
(('note:自動生成されたバインディングがいかに強力か'))

= What is ext?\n(('note:拡張ライブラリーってなに？'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, ((*Ext*)), ((*Ext*)), lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Extension library\n(('note:拡張ライブラリーとは'))

  * Ruby library written in ((*C*))\n
    (('note:Cで書かれたRuby用ライブラリー'))
  * (('wait'))Most bindings are ext lib\n
    (('note:多くのバインディングは拡張ライブラリーとして実装'))
    * (({openssl})) is ext lib and bindings\n
      (('note:(({oepnssl}))は拡張ライブラリーでバインディング'))
    * Exc.: (({stringio})) is ext lib but...\n
      (('note:例外：(({stringio}))は拡張ライブラリーだが…'))

= Ext lib and bindings\n(('note:拡張ライブラリーとバインディング'))

  # image
  # src = images/extension-library-and-bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= What is libffi?\n(('note:libffiってなに？'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, ((*lib\nffi*)), ((*lib\nffi*))
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= libffi and FFI: 1\n(('note:libffiとFFIとは：1'))

  * libffi: Library to impl. FFI\n
    (('note:FFIを実現するためのライブラリー'))
  * (('wait'))((*F*))oreign ((*F*))unction ((*I*))nterface
    * Generally:\n
      All APIs to impl. bindings\n
      (('note:一般的にはバインディングを実装するためのすべてのAPI'))
    * Ruby doesn't use "FFI" term\n
      (('note:Rubyでは「FFI」という単語を使わない'))

= libffi and FFI: 2\n(('note:libffiとFFIとは：2'))

  * Ruby FFI
    * (('wait'))Library based on libffi\n
      (('note:libffiを使ったライブラリー'))
    * (('wait'))Provides ((*Ruby*)) API\n
      to implement bindings\n
      (('note:バインディングを実装するためのRubyのAPIを提供'))

= libffi and bindings\n(('note:libffiとバインディング'))

  # image
  # src = images/libffi-and-bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= Impl. language\n(('note:実装言語'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nlang, C, C+α, Ruby, Ruby

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Ext impl. by\n(('note:拡張ライブラリーの実装方法'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, ((*Hand*)), ((*Generate*)), Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Ext impl. by: Target\n(('note:拡張ライブラリーの実装方法：対象'))

  # coderay c
  /* hello.h */
  #pragma once
  typedef struct hello_t Hello;
  Hello      *hello_new    (void);
  void        hello_free   (Hello *hello);
  const char *hello_message(Hello *hello);

= Ext impl. by hand\n(('note:手動での拡張ライブラリーの実装'))

  # img
  # src = images/bindings-as-extension-library.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Ext impl. by hand\n(('note:手動での拡張ライブラリーの実装'))

(('note:https://github.com/kou/rabbit-slide-kou-rubykaigi-2016/blob/master/c-api/bindings/hello.c'))

  # coderay c
  #include <ruby.h>

  #include <hello.h>

  static void
  rb_hello_free(void *data)
  {
    Hello *hello = data;
    hello_free(hello);
  }

  static const rb_data_type_t rb_hello_type = {
    "Hello",
    {
      NULL,
      rb_hello_free,
      NULL,
    },
    NULL,
    NULL,
    RUBY_TYPED_FREE_IMMEDIATELY,
  };

  static VALUE
  rb_hello_alloc(VALUE klass)
  {
    return TypedData_Wrap_Struct(klass, &rb_hello_type, NULL);
  }

  static VALUE
  rb_hello_initialize(VALUE self)
  {
    Hello *hello;
    hello = hello_new();
    DATA_PTR(self) = hello;
    return Qnil;
  }

  static VALUE
  rb_hello_message(VALUE self)
  {
    Hello *hello;
    const char *message;

    TypedData_Get_Struct(self, Hello, &rb_hello_type, hello);
    message = hello_message(hello);

    return rb_str_new_cstr(message);
  }

  void
  Init_hello(void)
  {
    VALUE hello;

    hello = rb_define_class("Hello", rb_cData);
    rb_define_alloc_func(hello, rb_hello_alloc);
    rb_define_method(hello, "initialize", rb_hello_initialize, 0);
    rb_define_method(hello, "message", rb_hello_message, 0);
  }

= Ext impl. by generation\n(('note:自動生成での拡張ライブラリーの実装'))

  # img
  # src = images/bindings-by-swig.svg
  # relative_height = 100

== Slide properties

: enable-title-on-image
   false

= Ext impl. by generation\n(('note:自動生成での拡張ライブラリーの実装'))

  * SWIG can generate impl.\n
    (('note:Simplified Wrapper and Interface Generator'))\n
    (('note:SWIGで実装を生成できる'))
  * (('wait'))An user
    * TensorFlow: A library for machine intelligence\n
      (('note:TensorFlow：機械知能のライブラリー'))\n
      Uses to generate Python bindings\n
      (('note:Pythonバインディングを生成するために使用'))

= Ext impl. by SWIG\n(('note:SWIGでの拡張ライブラリーの実装'))

  # coderay c
  // swig -ruby hello.i -> hello_wrap.c
  %module hello
  %{
  #include <hello.h>
  %}
  %include <hello.h>

= Use ext by SWIG\n(('note:SWIGで作った拡張ライブラリーを使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.hello_new
  => #<SWIG::TYPE_p_hello_t:0x000...>
  irb(main):003:0> Hello.hello_message(hello)
  => "Hello"
  irb(main):004:0> Hello.hello_free(hello)
  => nil
  # Raw C API... :<

= By SWIG again\n(('note:SWIGでもう一度'))

  # coderay c
  %module hello
  %{#include <hello.h>%}
  typedef struct hello_t {
    %extend {
      hello_t() {return hello_new();}
      ~hello_t() {hello_free($self);}
      const char *message() {return hello_message($self);}
    }
  } Hello;

= Use again\n(('note:もう一度使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello::Hello.new
  => #<Hello::Hello:0x000...>
  irb(main):003:0> hello.message
  => "Hello"
  # Object oriented API!

= Wrap up1: Ext\n(('note:まとめ1：拡張ライブラリー'))

  * (('wait'))By hand: Need many works\n
    (('note:手動：たくさん書かないといけない'))
  * (('wait'))By generation: Less works\n
    (('note:生成：書くことが少ない'))
    * Need more works for easy to use\n
      (('note:使いやすいAPIにするにはたくさん書かないといけない'))

= Wrap up2: Ext\n(('note:まとめ2：拡張ライブラリー'))

  * On maintenance\n
    e.g.: New functions, enums\n
    (('note:メンテナンス時：（例：新しい関数・列挙値が追加された）'))
    * (('wait'))By hand: Need more works\n
      (('note:手動：追加作業あり'))
    * (('wait'))By generation: No more works\n
      (('note:(But the bindings may not be easy to use)'))\n
      (('note:生成：（使いやすくないけど）追加作業なし'))\n
      This is a large benefit!\n
      (('note:これは大きな利点！'))

= libffi impl. by\n(('note:libffiベースでの実装方法'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, ((*Hand*)), ((*Generate*))

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= libffi impl. by hand\n(('note:手動でのlibffiベースの実装'))

  # img
  # src = images/bindings-by-ffi.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= libffi impl. by hand\n(('note:手動でのlibffiベースの実装'))

  # coderay ruby
  require "ffi"

  module LibHello
    extend FFI::Library
    ffi_lib "../../libhello/lib/libhello.so"
    attach_function :hello_new, [], :pointer
    attach_function :hello_message, [:pointer], :string
    attach_function :hello_free, [:pointer], :void
  end

= Use libffi impl. by hand\n(('note:手動でのlibffiベースの実装を使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = LibHello.hello_new
  => #<FFI::Pointer address=0x00000002b07ef0>
  irb(main):003:0> LibHello.hello_message(hello)
  => "Hello"
  irb(main):004:0> LibHello.hello_free(hello)
  => nil
  # Raw C API... :<

= Wrap FFI impl. 1\n(('note:FFIでの実装をラップ1'))

  # coderay ruby
  class Hello
    def initialize
      hello = LibHello.hello_new
      hello_free = LibHello.method(:hello_free)
      @hello =
        FFI::AutoPointer.new(hello, hello_free)
    end
  end

= Wrap FFI impl. 2\n(('note:FFIでの実装をラップ2'))

  # coderay ruby
  class Hello
    def message
      LibHello.hello_message(@hello)
    end
  end

= Use wrapped impl.\n(('note:ラップした実装を使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.new
  => #<Hello:0x000...>
  irb(main):003:0> hello.message
  => "Hello"
  # Object oriented API!

= libffi impl. by gen.\n(('note:自動生成でのlibffiベースの実装'))

  # img
  # src = images/bindings-by-gobject-introspection.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= libffi impl. by gen.\n(('note:自動生成でのlibffiベースの実装'))

  # coderay ruby
  require "gi"
  Hello = GI.load("Hello")

= Use libffi impl. by gen.\n(('note:自動生成でのlibffiベースの実装を使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello::Hello.new
  => #<Hello::Hello:0x2a9de98 ptr=0x2ecd540>
  irb(main):003:0> hello.message
  => "Hello"
  # Object oriented API!

= Wrap up1: libffi\n(('note:まとめ1：libffi'))

  * (('wait'))By hand: Need many works\n
    (('note:手動：たくさん書かないといけない'))
    * Need more works for easy to use\n
      (('note:使いやすいAPIにするにはさらに書かないといけない'))
  * (('wait'))By generation: Less works\n
    (('note:生成：書くことが少ない'))
    * No more works for easy to use\n
      (('note:しかも使いやすいAPIになる'))

= Wrap up2: libffi\n(('note:まとめ2：libffi'))

  * On maintenance\n
    e.g.: New functions, enums\n
    (('note:メンテナンス時：（例：新しい関数・列挙値が追加された）'))
    * (('wait'))By hand: Need more works\n
      (('note:手動：追加作業あり'))
    * (('wait'))By generation: No more works\n
      (('note:生成：追加作業なし'))\n
      This is a large benefit!\n
      (('note:これは大きな利点！'))

= SWIG⇔GI: When\n(('note:SWIG⇔GI：生成タイミング'))

  * When are bindings generated?\n
    (('note:バインディングの生成タイミング'))
    * (('wait'))On build⇔Runtime\n
      (('note:ビルド時⇔実行時'))
    * (('wait'))SWIG: Need to build for new ver.\n
      (('note:新しいバージョンがでたらリビルドが必要'))
    * (('wait'))GI: No more works for new ver.\n
      (('note:新しいバージョンがでても追加作業なし'))

= SWIG⇔GI: Maintenance\n(('note:SWIG⇔GI：メンテナンス'))

  * SWIG: Maintain .i file for each language bindings\n
    (('note:各言語バインディング用に.iファイルをメンテナンス'))
  * GI: Maintain annotations for all language bindings\n
    (('note:全言語バインディング用にアノテーションをメンテナンス'))
    * (('wait'))We can work together with other language bindings maintainers

= SWIG: Overview (reprise)\n(('note:SWIG：概要（再掲）'))

  # img
  # src = images/bindings-by-swig.svg
  # relative_height = 100

== Slide properties

: enable-title-on-image
   false

= SWIG: Maintenance\n(('note:SWIG：メンテナンス'))

  # img
  # src = images/maintain-swig-based-bindings.svg
  # relative_height = 100

== Slide properties

: enable-title-on-image
   false

= GI: Overview (reprise)\n(('note:GI：概要（再掲）'))

  # img
  # src = images/bindings-by-gobject-introspection.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= GI: Maintenance\n(('note:GI：メンテナンス'))

  # img
  # src = images/maintain-gobject-introspection-based-bindings.svg
  # relative_width = 100

== Slide properties

: enable-title-on-image
   false

= Wrap up1\n(('note:まとめ1'))

  * Bindings: Glue of C and Ruby\n
    (('note:バインディング：主にCとRubyをつなぐもの'))
    * (('wait'))You can use features implemented in C from Ruby\n
      (('note:Cで実装された機能をRubyから使える'))

= Wrap up2\n(('note:まとめ2'))

  * Bindings expand use cases of Ruby\n
    (('note:バインディングはRubyを使えるケースを増やす'))
    * Because they provide existing good features to Ruby\n
      (('note:バインディングは既存のよい機能をRubyで使えるようにするから'))

= Wrap up3\n(('note:まとめ3'))

  * Recommend GI based bindings\n
    (('note:GIベースのバインディングがオススメ'))
    * For easy to maintain\n
      (('note:メンテンナンスしやすいから'))
    * For easy to API\n
      (('note:使いやすいAPIになるから'))

(('note:GI: GObject Introspection'))

= Wrap up4\n(('note:まとめ4'))

Let's becoming a bindings developer!\n
(('note:バインディング開発者になろう！'))

= Advertisement\n(('note:宣伝'))

  * OSS Gate
    * Helps people who want to be an OSS developer (but not yet)\n
      (('note:OSS開発者になりたいけど一歩踏み出せていない人を支援'))
  * ClearCode booth(('note:（クリアコードブース）'))
    * You can discus about OSS Gate and more technical details\n
      (('note:OSS Gateやもっと技術的な話や雑談をできる'))

= Wrap up (reprise)\n(('note:まとめ（再掲）'))

Let's becoming a bindings developer!\n
(('note:バインディング開発者になろう！'))

= Things not talked\n(('note:話さなかったこと'))

  * Bindings are difficult to install on Win. Any idea?\n
    (('note:Windowsでインストールが大変。どうすれば？'))
  * Performance・Annotation\n
    (('note:性能・アノテーション'))
  * Details of each bindings create method\n
    (('note:それぞれのバインディング作成方法の詳細'))
