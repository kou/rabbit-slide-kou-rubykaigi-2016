= Ruby bindings 2016

: subtitle
   How to create bindings 2016

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2016
: date
   2016-09-08
: allotted-time
   35m
: theme
   .

= Silver sponsor

  # img
  # src = images/clear-code-silver-sponsor.png
  # relative_height = 100

# == Slide properties

# : enable-title-on-image
#    false

= Goal\n(('note:目標'))

(('tag:center'))
(('tag:large'))
You know about\n
how to create bindings

(('tag:center'))
(('note:バインディングの作り方を知ること'))

= Bindings?\n(('note:バインディングとは'))

  * Glue of (('note:(mainly)')) C and Ruby\n
    (('note:主にCとRubyをつなぐもの'))

    * (('wait'))You can use features implemented in C from Ruby\n
      (('note:Cで実装された機能をRubyから使える'))

    * (('wait'))e.g.: Socket, OpenSSL, YAML, ...\n
      (('note:例：ソケット、OpenSSL、YAML…'))

= Bindings\n(('note:バインディング'))

  # image
  # src = images/bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= Extension library?\n(('note:拡張ライブラリーとは'))

  * Ruby library written in C\n
    (('note:Cで書かれたRuby用ライブラリー'))
  * (('wait'))Normally, bindings are extension library\n
    (('note:多くの場合、バインディングは拡張ライブラリーでもある'))
    * e.g.: (({Pathname})) isn't bindings\n
      (('note:例：(({Pathname}))はバインディングではない'))

= Extension library and bindings\n(('note:拡張ライブラリーとバインディング'))

  # image
  # src = images/extension-library-and-bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= How to create bindings\n(('note:バインディングの作り方'))

= Method1: C API\n(('note:方法1：C API'))

  * Use C API provided by Ruby\n
    (('note:Rubyが提供するC APIを使う'))
    * (('wait'))It's for creating extension library\n
      (('note:拡張ライブラリーを作るためのAPI'))

= C API: Define class\n(('note:C API：クラス定義'))

  # coderay c
  #include <ruby.h>
  void
  Init_hello(void)
  {
    rb_define_class("Hello", rb_cObject);
    /* Ruby: class Hello; end */
  }

= C API: Initialize\n(('note:C API：初期化'))

  # coderay c
  #include <ruby.h>
  void
  Init_#{module_name}(void)
  {
    /* require "#{module_name}"
       calls this function */
  }

= C API: Init example\n(('note:C API：初期化例'))

  # coderay c
  #include <ruby.h>
  void
  Init_hello(void)
  {
    /* require "hello"
       calls this function */
  }

= C API: Define method\n(('note:C API：メソッド定義'))

  # coderay c
  static VALUE hello_to_s(VALUE self) {
    return rb_str_new_cstr("Hello");
  }
  void Init_hello(void) {
    VALUE hello;
    hello = rb_define_class("Hello", rb_cObject);
    rb_define_method(hello, "to_s", hello_to_s, 0);
  }

= C API: Build1\n(('note:C API：ビルド1'))

  # coderay ruby
  # extconf.rb
  require "mkmf"
  # "hello" == "#{module_name}"
  create_makefile("hello")

= C API: Build2\n(('note:C API：ビルド2'))

  % ruby extconf.rb
  % make
  (hello.so is generated.)

= C API: Use\n(('note:C API：使う'))

  % irb -I .
  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.new
  => #<Hello:0x00000001fd15a0>
  irb(main):003:0> hello.to_s
  => "Hello"

= C API: Create bindings\n(('note:C API：バインディングを作る'))

  * C API is for extension library\n
    (('note:C APIを使うと拡張ライブラリーを作れる'))
  * (('wait'))C API is also for bindings\n
    (('note:C APIを使うとバインディングも作れる'))
  * (('wait'))Show it from now just FYI\n
    (('note:参考までにこれから作り方を紹介する'))

= C API: Again, FYI!\n(('note:C API：参考のためですよ！'))

  * You don't need to understand about details now\n
    (('note:この場では詳細をわからなくても構わない'))\n
    * (('note:See also: Ruby:doc/extension.rdoc'))
    * (('note:See also: kou/rabbit-slide-kou-rubykaigi-2016'))
  * You just need to know how many steps exist\n
    (('note:どのくらいステップがあるかわかれば十分'))

= Bindings target\n(('note:バインディング対象'))

  # coderay c
  /* hello.h */
  #pragma once
  typedef struct hello_t Hello;
  Hello      *hello_new    (void);
  void        hello_free   (Hello *hello);
  const char *hello_message(Hello *hello);

= Define class\n(('note:クラス定義'))

  # coderay c
  void
  Init_hello(void)
  {
    VALUE hello;
    /* Ruby: class Hello < Data; end */
    hello = rb_define_class("Hello", rb_cData);
    rb_define_alloc_func(hello, rb_hello_alloc);
  }

= Wrap struct\n(('note:構造体をラップ'))

  # coderay c
  static VALUE
  rb_hello_alloc(VALUE klass)
  {
    /* Allocate memory for wrapping
       target struct in C (= Hello struct). */
    return TypedData_Wrap_Struct(klass,
                                 &rb_hello_type,
    /* Target struct is NULL at this phase. */
                                 NULL);
  }

= Define type metadata\n(('note:型用のメタデータを定義'))

  # coderay c
  static const rb_data_type_t rb_hello_type = {
    "Hello", /* Type name. */
    /* Mark, free, size functions. */
    {NULL, rb_hello_free, NULL,},
    NULL, /* Parent. It must be NULL. */
    NULL, /* Wrapped target struct. */
    RUBY_TYPED_FREE_IMMEDIATELY,
  };

= Free function\n(('note:メモリー解放関数'))

  # coderay c
  static void
  rb_hello_free(void *data)
  {
    Hello *hello = data;
    /* Just call the free function. */
    hello_free(hello);
  }

= Register (({initialize}))\n(('note:(({initialize}))登録'))

  # coderay c
  void Init_hello(void) {
     /* VALUE hello = Hello class */
     /* Ruby: def initialize; end */
     rb_define_method(hello,
    /* Method name */ "initialize",
                      rb_hello_initialize,
    /* No argument */ 0);
  }

= Initialize\n(('note:初期化'))

  # coderay c
  static VALUE
  rb_hello_initialize(VALUE self)
  {
    Hello *hello;
    hello = hello_new();    /* Create a target */
    DATA_PTR(self) = hello; /* Wrap the target */
    return Qnil;
  }

= Bind method\n(('note:メソッドをバインド'))

  # coderay c
  static VALUE rb_hello_message(VALUE self) {
    Hello *hello;
    const char *message;
    TypedData_Get_Struct( /* Unwrap the target. */
      self, Hello, &rb_hello_type, hello);
    message = hello_message(hello); /* Call. */
    return rb_str_new_cstr(message); /* C -> Ruby */
  }

= Build1\n(('note:ビルド1'))

  # coderay ruby
  # extconf.rb
  require "mkmf"
  # Accept --with-libhello-*.
  dir_config("libhello")
  have_header("hello.h")
  have_library("hello", "hello_new")

  create_makefile("hello")

= Build2\n(('note:ビルド2'))

  % ruby extconf.rb \
      --with-libhello-dir=../../libhello
  % make
  (hello.so is generated.)

= Use\n(('note:使う'))

  % LD_LIBRARY_PATH=../../libhello/lib \
      irb -I .
  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.new
  => #<Hello:0x00000002ae0e28>
  irb(main):003:0> hello.message
  => "Hello"

= C API: Merit\n(('note:C API：メリット'))

  * Can create bindings\n
    (('note:バインディングを作れる'))
  * (('wait'))Can use only with C and Ruby knowledge\n
    (('note:CとRubyを知っていれば使える'))

= C API: Demerit\n(('note:C API：デメリット'))

  * Many works for many (('note:target')) API\n
    (('note:対象のAPIがたくさんあるとやることが多い'))
  * (('wait'))Users need C compiler to install\n
    (('note:ユーザーはインストール時にCコンパイラーが必要'))
    * Most Windows users don't have it\n
      (('note:多くのWindowsユーザーは持っていない'))

= C API: Windows users\n(('note:C API：Windowsユーザー'))

  * How to install extension library...?\n
    (('note:拡張ライブリーをインストールするにはどうすれば…？'))
    * (('wait'))Install C compiler (('note:(DevKit)'))\n
      (('note:Cコンパイラー（DevKit）をインストール'))
    * (('wait'))Distribute built binary\n
      (('note:ビルド済みバイナリーを配布'))

= C API: Fat gem\n(('note:C API：fat gem'))

  * Gem includes built binaries\n
    (('note:ビルド済みバイナリー入りgem'))
    * (('note:(Mainly)')) Provided for Windows users\n
      (('note:主にWindowsユーザー向けに提供'))
  * (('wait'))Windows users don't need C compiler😼\n
    (('note:WindowsユーザーはCコンパイラーを用意しなくてよい'))

= Fat gem: Paths\n(('note:Fat gem：パス'))

Built binaries included in gem:\n
(('note:gem内にビルド済みバイナリーが入っている：'))

  ./lib/hello.rb
  ./lib/2.1/hello.so # For Ruby 2.1
  ./lib/2.2/hello.so # For Ruby 2.2
  ./lib/2.3/hello.so # For Ruby 2.3

= Fat gem: Load\n(('note:Fat gem：読み込み'))

  # coderay ruby
  # hello.rb
  begin
    major, minor, = RUBY_VERSION.split(".")
    # e.g.: require "2.3/hello.so"
    require "#{major}.#{minor}/hello.so"
  rescue LoadError
    require "hello.so"
  end

= Fat gem: Paths: Bindings\n(('note:Fat gem：バインディングの時のパス'))

  ./lib/hello.rb
  ./lib/2.1/hello.so # For Ruby 2.1
  ./lib/2.2/hello.so # For Ruby 2.2
  ./lib/2.3/hello.so # For Ruby 2.3
  # ↓Target library's DLL
  ./vendor/local/bin/hello.dll

= Fat gem: Load: Bindings\n(('note:Fat gem：バインディングの時の読み込み'))

  # coderay ruby
  # hello.rb
  if /mingw|mswin/ =~ RUBY_PLATFORM
    ENV["PATH"] += # For finding DLL
      ";#{__dir__}\\..\\vendor\\local\\bin"
  end
  begin
    major, minor, = RUBY_VERSION.split(".")
    # ...

= Fat gem: How to create?\n(('note:Fat gem：作り方'))
