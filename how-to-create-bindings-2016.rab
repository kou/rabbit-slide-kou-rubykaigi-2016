= Ruby bindings 2016

: subtitle
   How to create bindings 2016

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2016
: date
   2016-09-08
: allotted-time
   35m
: theme
   .

= Silver sponsor

  # img
  # src = images/clear-code-silver-sponsor.png
  # relative_height = 100

# == Slide properties

# : enable-title-on-image
#    false

= Goal\n(('note:目標'))

(('tag:center'))
(('tag:large'))
You know about\n
how to create bindings

(('tag:center'))
(('note:バインディングの作り方を知ること'))

= Bindings?\n(('note:バインディングとは'))

  * Glue of (('note:(mainly)')) C and Ruby\n
    (('note:主にCとRubyをつなぐもの'))

    * (('wait'))You can use features implemented in C from Ruby\n
      (('note:Cで実装された機能をRubyから使える'))

    * (('wait'))e.g.: Socket, OpenSSL, YAML, ...\n
      (('note:例：ソケット、OpenSSL、YAML…'))

= Bindings\n(('note:バインディング'))

  # image
  # src = images/bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= But why do I know?\n(('note:でも、どうして知るといいの？'))

  * (('wait'))To use Ruby in more cases\n
    (('note:Rubyをもっといろんな場面で使うため'))
    * e.g.: (('tag:x-small:Machine leaning, multimedia, full text search, cipher and so on'))\n
      (('note:例：機械学習、画像・動画・音声処理、全文検索・暗号'))
  * (('wait'))We can use existing good features in Ruby by bindings\n
    (('note:バインディングがあると既存のいい機能をRubyで使える'))

= Incr. bindings developer\n(('note:バインディング開発者が増えるといいな'))

  * How about becoming a bindings developer?\n
    (('note:バインディング開発者になりませんか？'))
    * (('wait'))To expand Ruby use cases!\n
      (('note:Rubyの適用可能領域を増やすために！'))
    * (('wait'))Not just an user for\n
      provided features\n
      (('note:提供された機能を使う1ユーザーではなく'))

= Summary\n(('note:概要'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Demo\n(('note:デモ'))

How powerful auto generated bindings\n
(('note:自動生成されたバインディングがいかに強力か'))

= What is ext?\n(('note:拡張ライブラリーってなに？'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, ((*Ext*)), ((*Ext*)), lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Extension library\n(('note:拡張ライブラリーとは'))

  * Ruby library written in ((*C*))\n
    (('note:Cで書かれたRuby用ライブラリー'))
  * (('wait'))Most bindings are ext lib\n
    (('note:多くのバインディングは拡張ライブラリーとして実装'))
    * (({openssl})) is ext lib and bindings\n
      (('note:(({oepnssl}))は拡張ライブラリーでバインディング'))
    * Exc.: (({stringio})) is ext lib but...\n
      (('note:例外：(({stringio}))は拡張ライブラリーだが…'))

= Ext lib and bindings\n(('note:拡張ライブラリーとバインディング'))

  # image
  # src = images/extension-library-and-bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= What is libffi?\n(('note:libffiってなに？'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, ((*lib\nffi*)), ((*lib\nffi*))
  Impl.\nby, Hand, Gene-rate, Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= libffi and FFI: 1\n(('note:libffiとFFIとは：1'))

  * libffi: Library to impl. FFI
  * (('wait'))((*F*))oreign ((*F*))unction ((*I*))nterface
    * Generally:\n
      All APIs to impl. bindings\n
      (('note:一般的にはバインディングを実装するためのすべてのAPI'))
    * Ruby doesn't use "FFI" term\n
      (('note:Rubyでは「FFI」という単語を使わない'))

= libffi and FFI: 2\n(('note:libffiとFFIとは：2'))

  * Ruby FFI
    * (('wait'))Library based on libffi\n
      (('note:libffiを使ったライブラリー'))
    * (('wait'))Provides ((*Ruby*)) API\n
      to implement bindings\n
      (('note:バインディングを実装するためのRubyレベルのAPIを提供'))

= libffi and bindings\n(('note:libffiとバインディング'))

  # image
  # src = images/libffi-and-bindings.svg
  # relative_height = 100

== slide properties

: enable-title-on-image
   false

= Impl. language\n(('note:実装言語'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nlang, C, C+α, Ruby, Ruby

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Ext impl. by\n(('note:拡張ライブラリーの実装方法'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, ((*Hand*)), ((*Generate*)), Hand, Gene-rate

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= Ext impl. by: Target\n(('note:拡張ライブラリーの実装方法：対象'))

  # coderay c
  /* hello.h */
  #pragma once
  typedef struct hello_t Hello;
  Hello      *hello_new    (void);
  void        hello_free   (Hello *hello);
  const char *hello_message(Hello *hello);

= Ext impl. by hand\n(('note:手動での拡張ライブラリーの実装'))

(('note:https://github.com/kou/rabbit-slide-kou-rubykaigi-2016/blob/master/c-api/bindings/hello.c'))

  # coderay c
  #include <ruby.h>

  #include <hello.h>

  static void
  rb_hello_free(void *data)
  {
    Hello *hello = data;
    hello_free(hello);
  }

  static const rb_data_type_t rb_hello_type = {
    "Hello",
    {
      NULL,
      rb_hello_free,
      NULL,
    },
    NULL,
    NULL,
    RUBY_TYPED_FREE_IMMEDIATELY,
  };

  static VALUE
  rb_hello_alloc(VALUE klass)
  {
    return TypedData_Wrap_Struct(klass, &rb_hello_type, NULL);
  }

  static VALUE
  rb_hello_initialize(VALUE self)
  {
    Hello *hello;
    hello = hello_new();
    DATA_PTR(self) = hello;
    return Qnil;
  }

  static VALUE
  rb_hello_message(VALUE self)
  {
    Hello *hello;
    const char *message;

    TypedData_Get_Struct(self, Hello, &rb_hello_type, hello);
    message = hello_message(hello);

    return rb_str_new_cstr(message);
  }

  void
  Init_hello(void)
  {
    VALUE hello;

    hello = rb_define_class("Hello", rb_cData);
    rb_define_alloc_func(hello, rb_hello_alloc);
    rb_define_method(hello, "initialize", rb_hello_initialize, 0);
    rb_define_method(hello, "message", rb_hello_message, 0);
  }

= Ext impl. by generation\n(('note:自動生成での拡張ライブラリーの実装'))

  * (('wait'))SWIG can generate impl.\n
    (('note:Simplified Wrapper and Interface Generator'))\n
    (('note:SWIGで実装を生成できる'))
  * (('wait'))An user
    * TensorFlow: A library for machine intelligence\n
      (('note:TensorFlow：機械知能のライブラリー'))\n
      Uses to generate Python bindings\n
      (('note:Pythonバインディングを生成するために使用'))

= Ext impl. by SWIG\n(('note:SWIGでの拡張ライブラリーの実装'))

  # coderay c
  // swig -ruby hello.i -> hello_wrap.c
  %module hello
  %{
  #include <hello.h>
  %}
  %include <hello.h>

= Use ext by SWIG\n(('note:SWIGで作った拡張ライブラリーを使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.hello_new
  => #<SWIG::TYPE_p_hello_t:0x000...>
  irb(main):003:0> Hello.hello_message(hello)
  => "Hello"
  irb(main):004:0> Hello.hello_free(hello)
  => nil
  # Raw C API... :<

= By SWIG again\n(('note:SWIGでもう一度'))

  # coderay c
  %module hello
  %{#include <hello.h>%}
  typedef struct hello_t {
    %extend {
      hello_t() {return hello_new();}
      ~hello_t() {hello_free($self);}
      const char *message() {return hello_message($self);}
    }
  } Hello;

= Use again\n(('note:もう一度使う'))

  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello::Hello.new
  => #<Hello::Hello:0x000...>
  irb(main):003:0> hello.message
  => "Hello"
  # Object oriented API!

= Wrap up1: Ext\n(('note:まとめ1：拡張ライブラリー'))

  * (('wait'))By hand: Need many works\n
    (('note:手動：たくさん書かないといけない'))
  * (('wait'))By generation: Less works\n
    (('note:生成：書くことが少ない'))
    * Need more works for easy to use\n
      (('note:使いやすいAPIにするにはたくさん書かないといけない'))

= Wrap up2: Ext\n(('note:まとめ2：拡張ライブラリー'))

  * On maintenance\n
    e.g.: New functions\n
    (('note:メンテナンス時：（例：新しい関数が追加された）'))
    * (('wait'))By hand: Need more works\n
      (('note:手動：追加作業あり'))
    * (('wait'))By generation: No more works\n
      (('note:生成：追加作業なし'))\n
      This is a large benefit!\n
      (('note:これは大きな利点！'))

= libffi impl. by\n(('note:libffiベースでの実装方法'))

  # RT

  , Ext★, SWIG, FFI, GI☆

  Base\nTech, Ext, Ext, lib\nffi, lib\nffi
  Impl.\nby, Hand, Gene-rate, ((*Hand*)), ((*Generate*))

(('note:★ Extension library（拡張ライブラリー）'))\n
(('note:☆ GObject Introspection: Recommended（オススメ）'))

= libffi impl. by hand\n(('note:手動でのlibffiベースの実装'))

TODO

= libffi impl. by generation\n(('note:自動生成でのlibffiベースの実装'))

TODO

= Appendix\n(('note:付録'))

  * Ext, SWIG, FFI, GI impl. details
  * How to create fat gem

= Method1: C API\n(('note:方法1：C API'))

  * Use C API provided by Ruby\n
    (('note:Rubyが提供するC APIを使う'))
    * (('wait'))It's for creating ext lib\n
      (('note:拡張ライブラリーを作るためのAPI'))

= C API: Define class\n(('note:C API：クラス定義'))

  # coderay c
  #include <ruby.h>
  void
  Init_hello(void)
  {
    rb_define_class("Hello", rb_cObject);
    /* Ruby: class Hello; end */
  }

= C API: Initialize\n(('note:C API：初期化'))

  # coderay c
  #include <ruby.h>
  void
  Init_#{module_name}(void)
  {
    /* require "#{module_name}"
       calls this function */
  }

= C API: Init example\n(('note:C API：初期化例'))

  # coderay c
  #include <ruby.h>
  void
  Init_hello(void)
  {
    /* require "hello"
       calls this function */
  }

= C API: Define method\n(('note:C API：メソッド定義'))

  # coderay c
  static VALUE hello_to_s(VALUE self) {
    return rb_str_new_cstr("Hello");
  }
  void Init_hello(void) {
    VALUE hello;
    hello = rb_define_class("Hello", rb_cObject);
    rb_define_method(hello, "to_s", hello_to_s, 0);
  }

= C API: Build1\n(('note:C API：ビルド1'))

  # coderay ruby
  # extconf.rb
  require "mkmf"
  # "hello" == "#{module_name}"
  create_makefile("hello")

= C API: Build2\n(('note:C API：ビルド2'))

  % ruby extconf.rb
  % make
  (hello.so is generated.)

= C API: Use\n(('note:C API：使う'))

  % irb -I .
  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.new
  => #<Hello:0x00000001fd15a0>
  irb(main):003:0> hello.to_s
  => "Hello"

= C API: Create bindings\n(('note:C API：バインディングを作る'))

  * C API is for ext lib\n
    (('note:C APIを使うと拡張ライブラリーを作れる'))
  * (('wait'))C API is also for bindings\n
    (('note:C APIを使うとバインディングも作れる'))
  * (('wait'))Show it from now just FYI\n
    (('note:参考までにこれから作り方を紹介する'))

= C API: Again, FYI!\n(('note:C API：参考のためですよ！'))

  * You don't need to understand about details now\n
    (('note:この場では詳細をわからなくても構わない'))\n
    * (('note:See also: Ruby:doc/extension.rdoc'))
    * (('note:See also: kou/rabbit-slide-kou-rubykaigi-2016'))
  * You just need to know how many steps exist\n
    (('note:どのくらいステップがあるかわかれば十分'))

= Bindings target\n(('note:バインディング対象'))

  # coderay c
  /* hello.h */
  #pragma once
  typedef struct hello_t Hello;
  Hello      *hello_new    (void);
  void        hello_free   (Hello *hello);
  const char *hello_message(Hello *hello);

= Define class\n(('note:クラス定義'))

  # coderay c
  void
  Init_hello(void)
  {
    VALUE hello;
    /* Ruby: class Hello < Data; end */
    hello = rb_define_class("Hello", rb_cData);
    rb_define_alloc_func(hello, rb_hello_alloc);
  }

= Wrap struct\n(('note:構造体をラップ'))

  # coderay c
  static VALUE
  rb_hello_alloc(VALUE klass)
  {
    /* Allocate memory for wrapping
       target struct in C (= Hello struct). */
    return TypedData_Wrap_Struct(klass,
                                 &rb_hello_type,
    /* Target struct is NULL at this phase. */
                                 NULL);
  }

= Define type metadata\n(('note:型用のメタデータを定義'))

  # coderay c
  static const rb_data_type_t rb_hello_type = {
    "Hello", /* Type name. */
    /* Mark, free, size functions. */
    {NULL, rb_hello_free, NULL,},
    NULL, /* Parent. It must be NULL. */
    NULL, /* Wrapped target struct. */
    RUBY_TYPED_FREE_IMMEDIATELY,
  };

= Free function\n(('note:メモリー解放関数'))

  # coderay c
  static void
  rb_hello_free(void *data)
  {
    Hello *hello = data;
    /* Just call the free function. */
    hello_free(hello);
  }

= Register (({initialize}))\n(('note:(({initialize}))登録'))

  # coderay c
  void Init_hello(void) {
    /* VALUE hello = Hello class */
    /* Ruby: def initialize; end */
    rb_define_method(hello,
          /* Name */ "initialize",
                     rb_hello_initialize,
    /* No argument */ 0);
  }

= Initialize\n(('note:初期化'))

  # coderay c
  static VALUE
  rb_hello_initialize(VALUE self)
  {
    Hello *hello;
    hello = hello_new();    /* Create a target */
    DATA_PTR(self) = hello; /* Wrap the target */
    return Qnil;
  }

= Bind method\n(('note:メソッドをバインド'))

  # coderay c
  static VALUE rb_hello_message(VALUE self) {
    Hello *hello;
    const char *message;
    TypedData_Get_Struct( /* Unwrap the target. */
      self, Hello, &rb_hello_type, hello);
    message = hello_message(hello); /* Call. */
    return rb_str_new_cstr(message); /* C -> Ruby */
  }

= Build1\n(('note:ビルド1'))

  # coderay ruby
  # extconf.rb
  require "mkmf"
  # Accept --with-libhello-*.
  dir_config("libhello")
  have_header("hello.h")
  have_library("hello", "hello_new")

  create_makefile("hello")

= Build2\n(('note:ビルド2'))

  % ruby extconf.rb \
      --with-libhello-dir=../../libhello
  % make
  (hello.so is generated.)

= Use\n(('note:使う'))

  % LD_LIBRARY_PATH=../../libhello/lib \
      irb -I .
  irb(main):001:0> require "hello"
  => true
  irb(main):002:0> hello = Hello.new
  => #<Hello:0x00000002ae0e28>
  irb(main):003:0> hello.message
  => "Hello"

= C API: Merit\n(('note:C API：メリット'))

  * Can create bindings\n
    (('note:バインディングを作れる'))
  * (('wait'))Can use only with C and Ruby knowledge\n
    (('note:CとRubyを知っていれば使える'))

= C API: Demerit\n(('note:C API：デメリット'))

  * Many works for many (('note:target')) API\n
    (('note:対象のAPIがたくさんあるとやることが多い'))
  * (('wait'))Users need C compiler to install\n
    (('note:ユーザーはインストール時にCコンパイラーが必要'))
    * Most Windows users don't have it\n
      (('note:多くのWindowsユーザーは持っていない'))

= C API: Windows users\n(('note:C API：Windowsユーザー'))

  * How to install extension library...?\n
    (('note:拡張ライブリーをインストールするにはどうすれば…？'))
    * (('wait'))Install C compiler (('note:(DevKit)'))\n
      (('note:Cコンパイラー（DevKit）をインストール'))
    * (('wait'))Distribute built binary\n
      (('note:ビルド済みバイナリーを配布'))

= C API: Fat gem\n(('note:C API：fat gem'))

  * Gem includes built binaries\n
    (('note:ビルド済みバイナリー入りgem'))
    * (('note:(Mainly)')) Provided for Windows users\n
      (('note:主にWindowsユーザー向けに提供'))
  * (('wait'))Windows users don't need C compiler😼\n
    (('note:WindowsユーザーはCコンパイラーを用意しなくてよい'))

= Fat gem: Paths\n(('note:fat gem：パス'))

Built binaries included in gem:\n
(('note:gem内にビルド済みバイナリーが入っている：'))

  ./lib/hello.rb
  ./lib/2.1/hello.so # For Ruby 2.1
  ./lib/2.2/hello.so # For Ruby 2.2
  ./lib/2.3/hello.so # For Ruby 2.3

= Fat gem: Load\n(('note:fat gem：読み込み'))

  # coderay ruby
  # hello.rb
  begin
    major, minor, = RUBY_VERSION.split(".")
    # e.g.: require "2.3/hello.so"
    require "#{major}.#{minor}/hello.so"
  rescue LoadError
    require "hello.so"
  end

= Fat gem: Paths: Bindings\n(('note:fat gem：バインディングの時のパス'))

  ./lib/hello.rb
  ./lib/2.1/hello.so # For Ruby 2.1
  ./lib/2.2/hello.so # For Ruby 2.2
  ./lib/2.3/hello.so # For Ruby 2.3
  # ↓Target library's DLL
  ./vendor/local/bin/hello.dll

= Fat gem: Load: Bindings\n(('note:fat gem：バインディングの時の読み込み'))

  # coderay ruby
  # hello.rb
  if /mingw|mswin/ =~ RUBY_PLATFORM
    ENV["PATH"] += # For finding DLL
      ";#{__dir__}\\..\\vendor\\local\\bin"
  end
  begin
    major, minor, = RUBY_VERSION.split(".")
    # ...

= Fat gem: How to create?\n(('note:fat gem：作り方'))

  (1) (('wait'))Build DLLs\n
      (('note:DLLをビルド'))
  (2) (('wait'))Bundle DLLs to gem\n
      (('note:gemにDLLをバンドル'))

= Fat gem: How to build?\n(('note:fat gem：ビルド方法'))

  * (('wait'))Build on Windows with C compiler\n
    (('note:Windows上でCコンパイラーでビルド'))
  * (('wait'))Build on GNU/Linux or OS X with C cross compiler\n
    (('note:GNU/LinuxまたはOS X上でCクロスコンパイラーでビルド'))
    * Popular\n
      (('note:こちらが一般的'))

= How to cross compile\n(('note:クロスコンパイル方法'))

  (1) Cross compile target Rubyies\n
      (('note:対象のRubyをクロスコンパイル'))
  (2) Run (({extconf.rb})) with target Rubies\n
      (('note:対象のRubyで(({extconf.rb}))を実行'))
  (3) Cross compile\n
      (('note:クロスコンパイル'))

= Fat gem helper gems\n(('note:fat gem作成支援gem'))

  * rake-compiler
    * Cross compiling and bundling\n
      (('note:クロスコンパイルとバンドル支援'))
  * rake-compiler-dock
    * Prepares build environment\n
      (('note:ビルド環境用意支援'))

= Fat gem and bindings\n(('note:fat gemとバインディング'))

  * Bindings need DLL of target library\n
    (('note:バインディングは対象ライブラリーのDLLも必要'))
  * Target library should be also cross compiled\n
    (('note:対象ライブラリーもクロスコンパイルが必要'))

= How to cross compile1\n(('note:クロスコンパイル方法1'))

For GNU Autotools:

  % ./configure \
      --prefix=vendor/local \
      --host=x86_64-w64-mingw32
  % make
  % make install

= How to cross compile2\n(('note:クロスコンパイル方法2'))

For CMake:

  % cmake . \
      -DCMAKE_INSTALL_PREFIX=vendor/local \
      -DCMAKE_SYSTEM_NAME=Windows \
      -DCMAKE_SYSTEM_PROCESSOR=x64 \
      -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc
  % make
  % make install

= How to bundle\n(('note:バンドル方法'))

  # coderay ruby
  # #{gem_name}.gemspec
  Gem::Specification.new do |spec|
    # ...
    spec.files +=
      Dir.glob("vendor/local/**/*")
    # ...
  end

= Fat gem & Windows users\n(('note:fat gemとWindowsユーザー'))

  * Windows users can't use bindings created by C API\n
    (('note:インストールが難しくてWindowsユーザーはC APIで作成されたバインディングをインストールできない'))
    * Difficult to install
  * (('wait'))Fat gem makes bindings easy to install for Windows users\n
    (('note:fat gemがあれば簡単にインストールできる'))

= C API: Demerit (reprise)\n(('note:C API：デメリット（再掲）'))

  * Many works for many (('note:target')) API\n
    (('note:対象のAPIがたくさんあるとやることが多い'))
  * (('wait'))Users need C compiler to install\n
    (('note:ユーザーはインストール時にCコンパイラーが必要'))
    * Most Windows users don't have it\n
      (('note:多くのWindowsユーザーは持っていない'))

= SWIG

(('tag:center'))
Simplified Wrapper and Interface Generator

  * (('wait'))Generate bindings by C API\n
    (('note:C APIを使ったバインディングを生成'))
  * (('wait'))Reduce hand writing codes\n
    (('note:手書きのコードを減らせる'))

= SWIG: How to use\n(('note:SWIG：使い方'))

  (1) Generate bindings\n
      (('note:バインディングを生成'))
  (2) (('wait'))Build bindings (('note:(Same as C API)'))\n
      (('note:バインディングをビルド（C APIと同じ）'))
  (3) (('wait'))Use bindings (('note:(Same as C API)'))\n
      (('note:バインディングを使う（C APIと同じ）'))

= SWIG: Generate\n(('note:SWIG：生成'))
